program             → statement* EOF ;

statement           → letStatement
                    | returnStatement
                    | expressionStatement ;

letStatement        → "let" identifier "=" expression ";" ;
returnStatement     → "return" expression ";" ;
expressionStatement → expression ";"? ;

expression          → identifier
                    | integerLiteral
                    | booleanLiteral
                    | stringLiteral
                    | prefixExpression
                    | infixExpression
                    | ifExpression
                    | functionLiteral
                    | callExpression
                    | arrayLiteral
                    | indexExpression
                    | hashLiteral ;

prefixExpression    → ("!" | "-") expression ;
infixExpression     → expression operator expression ;
operator            → "+" | "-" | "*" | "/" 
                    | "==" | "!=" | "<" | ">" ;

ifExpression        → "if" "(" expression ")" blockStatement ("else" blockStatement)? ;
blockStatement      → "{" statement* "}" ;

functionLiteral     → "fn" "(" (identifier ("," identifier)*)? ")" blockStatement ;
callExpression      → expression "(" (expression ("," expression)*)? ")" ;

arrayLiteral        → "[" (expression ("," expression)*)? "]" ;
indexExpression     → expression "[" expression "]" ;
hashLiteral         → "{" (expression ":" expression ("," expression ":" expression)*)? "}" ;

identifier          → LETTER (LETTER | DIGIT)* ;
integerLiteral      → DIGIT+ ;
booleanLiteral      → "true" | "false" ;
stringLiteral       → '"' .* '"' ;
